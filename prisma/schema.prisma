// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/shared/generated/type-graphql"
}

//######################################################################
//######################################################################
//######################################################################
//##########                                             ###############
//##########        ROLES USERS POSTS CATAGOGRIES        ###############
//##########                                             ###############
//######################################################################
//######################################################################
//######################################################################

model Role {
  id            String                       @id @default(cuid()) @map("_id")
  name          String                       @db.VarChar(255)
  admistrators  RolesAdministratorsMapping[]
  canQueryUsers Boolean                      @default(false) @map("can_query_users")
  canCrudUsers  Boolean                      @default(false) @map("can_crud_users")
  canQueryRoles Boolean                      @default(false) @map("can_query_roles")
  canCrudRoles  Boolean                      @default(false) @map("can_crud_roles")
  canQueryPosts Boolean                      @default(false) @map("can_query_posts")
  canCrudPosts  Boolean                      @default(false) @map("can_crud_posts")
  createdAt     DateTime                     @default(now()) @map("created_at")
  modifiedAt    DateTime                     @default(now()) @map("modified_at")
  deletedAt     DateTime                     @default(now()) @map("deleted_at")

  @@map("roles")
}

model User {
  id         String                       @id @default(cuid()) @map("_id")
  firstName  String                       @map("first_name") @db.VarChar(100)
  lastName   String                       @map("last_name") @db.VarChar(100)
  email      String                       @unique @db.VarChar(100)
  /// @TypeGraphQL.omit(output: true)
  confirmed  Boolean                      @default(false)
  /// @TypeGraphQL.omit(output: true)
  password   String
  posts      PostsUsersMapping[]
  roles      RolesAdministratorsMapping[]
  createdAt  DateTime                     @default(now()) @map("created_at")
  modifiedAt DateTime                     @default(now()) @map("modified_at")
  deletedAt  DateTime                     @default(now()) @map("deleted_at")

  @@map("users")
}

model Post {
  id          String                   @id @default(cuid()) @map("_id")
  title       String                   @db.VarChar(255)
  description String                   @db.VarChar(255)
  content     String                   @db.VarChar(10000)
  authors     PostsUsersMapping[]
  catagories  CatagoriesPostsMapping[]
  createdAt   DateTime                 @default(now()) @map("created_at")
  modifiedAt  DateTime                 @default(now()) @map("modified_at")
  deletedAt   DateTime                 @default(now()) @map("deleted_at")

  @@map("posts")
}

model Catagory {
  id         String                   @id @default(cuid()) @map("_id")
  name       String                   @unique @db.VarChar(50)
  posts      CatagoriesPostsMapping[]
  createdAt  DateTime                 @default(now()) @map("created_at")
  modifiedAt DateTime                 @default(now()) @map("modified_at")

  @@map("catagories")
}

//#####################################################
//#####################################################
//#########          RELATIONS           ##############
//#####################################################
//#####################################################

model RolesAdministratorsMapping {
  role            Role    @relation(fields: [roleId], references: [id])
  roleId          String  @map("role_id")
  user            User    @relation(fields: [administratorId], references: [id])
  administratorId String  @map("user_id")
  dummy           String?

  @@id([roleId, administratorId])
  @@map("roles_users")
}

model PostsUsersMapping {
  post   Post    @relation(fields: [postId], references: [id])
  postId String  @map("post_id")
  user   User    @relation(fields: [userId], references: [id])
  userId String  @map("user_id")
  dummy  String?

  @@id([postId, userId])
  @@map("posts_users")
}

model CatagoriesPostsMapping {
  catagory   Catagory @relation(fields: [catagoryId], references: [id])
  catagoryId String   @map("catagory_id")
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @map("post_id")
  dummy      String?

  @@id([catagoryId, postId])
  @@map("catagories_posts")
}

//####################################################################
//####################################################################
//####################################################################
//########                                             ###############
//########              SOME OTHER GROUP               ###############
//########                                             ###############
//####################################################################
//####################################################################
//####################################################################
